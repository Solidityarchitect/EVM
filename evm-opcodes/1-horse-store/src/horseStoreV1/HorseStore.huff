// send calldata -> function dispatch -> function

// 60008060093d393df3 -> Conract Creation Bytecode
// 60018060093d393df3 5f -> push 0 opcode in our huff
// Bytecode


// Let's find the function selector -> route
// it to the code that updates horses
#define macro MAIN() = takes(0) {
    // 0x00            // [0]
    // 0x02         // TOP [2, 0] BOTTOM
    // calldataload    // [calldata (32)]
    // How do we cut down the calldata -> func selector ?
    // 64/2 = 32 bytes -> right
    // We need to right shift 28 bytes, 224 bits
    // 0xe0         // [0xe0, calldata (32)]
    // shr          // [function_selector]

    0x00 calldataload 0xE0 shr // [function_selector]

    // Jump -> function data associated with the selector
    // If f_select == updateHorseNumber -> jump to that code 0xcdfead2e
    // If f_select == readNumberOfHorses -> jump to that code 0xe026c017

    // updateHorseNumber selector
    dup1                        // [function_selector, function_selector]
    0xcdfead2e                  // [0xcdfead2e, function_selector]
    eq                          // [true_if_func_selector_matches]
    // jump to updateHorseNumber code if true
    updateJump                  // [updateHorseNumberProgramCounter, true/false, function_selector]
    jumpi                       // [function_selector]

    // readNumberOfHorses 0xe026c017
    0xe026c017                  // [0xe026c017, function_selector]
    eq                          // [true_if_func_selector_matches]
    // jump to readNumberOfHorses code if true
    readJump                    // [readNumberOfHorsesProgramCounter, true/false, function_selector]
    jumpi


    updateJump:
        SET_NUMBER_OF_HORSES()
    readJump:
        GET_NUMBER_OF_HORSES()
}

#define macro SET_NUMBER_OF_HORSES() = takes(0) returns(0){}
// 60108060093d393df35f3560e01c63cdfead2e1461000f575b

#define macro GET_NUMBER_OF_HORSES() = takes(0) returns(0){}
